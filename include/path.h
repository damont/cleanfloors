//////////////////////////////////////////////////////////////////////////////
/// @file path.h
///
/// @author David Monts
///
/// @date April 2016
///
/// @brief A path contains steps, so it is one above the lowest level of mapping.
///		   Every step within a path has the same x coordinate.
//////////////////////////////////////////////////////////////////////////////

#ifndef INCLUDE_PATH_H_
#define INCLUDE_PATH_H_

#include "step.h"
#include "state.h"
#include <list>

//////////////////////////////////////////////////////////////////////////////
/// @class Path
///
/// @brief Holds a list of steps.
//////////////////////////////////////////////////////////////////////////////
class Path
{
public:
	//////////////////////////////////////////////////////////////////////////
	/// @public Path constructor
	///
	/// @brief Creates a path with atleast one step
	///
	/// @param[in] xid - The x coordinate for the entire path
	/// @param[in] yid - The y coordinate for the current step
	/// @param[in] step_state - The state of the current location
	//////////////////////////////////////////////////////////////////////////
	Path(int32_t xid, int32_t yid, State step_state);

	//////////////////////////////////////////////////////////////////////////
	/// @public
	///
	/// @brief Assignment operator.
	///
	/// @param[in] rhs - The Step object that is going to be copied
	//////////////////////////////////////////////////////////////////////////
	Path& operator=(Path &rhs);

	//////////////////////////////////////////////////////////////////////////
	/// @public set_state
	///
	/// @brief Sets the state of a step
	///
	/// @param[in] yid - The y coordinate for the step to set the state
	/// @param[in] state - The state for the step
	//////////////////////////////////////////////////////////////////////////
	void set_state(int32_t yid, State state);

	//////////////////////////////////////////////////////////////////////////
	/// @public get_state
	///
	/// @brief Returns the state at the provided y coordinate
	///
	/// @param[in] yid - The y coordinate for which we want to know the state
	///
	/// @returns the state of the step
	//////////////////////////////////////////////////////////////////////////
	State get_state(int32_t yid);

	//////////////////////////////////////////////////////////////////////////
	/// @public get_id
	///
	/// @brief Returns the id which is the x coordinate
	///
	/// @returns the x coordinate
	//////////////////////////////////////////////////////////////////////////
	int32_t get_id();

	//////////////////////////////////////////////////////////////////////////
	/// @public set_id
	///
	/// @brief Sets the x coordinate of the path
	///
	/// @param[in] xid - The x coordinate of the path.
	//////////////////////////////////////////////////////////////////////////
	void set_id(int32_t xid);

private:
	std::list<Step> m_steps;
	int32_t m_id;
};



#endif /* INCLUDE_PATH_H_ */
